<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
  <meta name="author" content="puravidaapps.com">

  <!-- more about Skulpt see http://www.skulpt.org Thank you Scott Graham! -->

  <script src="jquery-1.9.0.min.js" type="text/javascript"></script>
  <script src="skulpt.min.js" type="text/javascript"></script>
  <script src="skulpt-stdlib.js" type="text/javascript"></script>


</head>

<body>
  <pre id="output"></pre>
  <!-- If you want turtle graphics include a canvas -->
  <canvas id="mycanvas" ></canvas>

  <script type="text/javascript">
  // output functions are configurable. This one just appends some text
  // to a pre element.
  function outf(text) {
    var mypre = document.getElementById("output");
    mypre.innerHTML = mypre.innerHTML + text;

    // print the result to the page title
    window.document.title = mypre.innerHTML;
  }

var myCustomFiles = {'ScratchApi.py', "#!\/usr\/bin\/env python3\r\n# -*- coding: utf-8 -*-\r\n\r\n\"\"\"\r\nCopyright (c) 2015 Dylan Beswick\r\nThe MIT License (MIT)\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files\r\n(the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge,\r\npublish, distribute, sublicense, and\/or sell  copies of the Software, and to permit persons to whom the Software is furnished to do\r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE\r\nFOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\"\"\"\r\n\r\n\r\n# ScratchAPI 1.0\r\n# Written by Dylan5797 [http:\/\/dylan4.com]\r\n#  _____        _             _____ ______ ___ ______\r\n# |  __ \\      | |           | ____|____  \/ _ \\____  |\r\n# | |  | |_   _| | __ _ _ __ | |__     \/ \/ (_) |  \/ \/\r\n# | |  | | | | | |\/ _  |  _ \\|___ \\   \/ \/ \\__  | \/ \/\r\n# | |__| | |_| | | (_| | | | |___) | \/ \/    \/ \/ \/ \/\r\n# |_____\/ \\__  |_|\\__|_|_| |_|____\/ \/_\/    \/_\/ \/_\/\r\n#          __\/ |\r\n#         |___\/\r\n\r\nimport requests as _requests\r\nimport json as _json\r\nimport socket as _socket\r\nimport hashlib as _hashlib\r\nimport os as _os\r\nimport time as _time\r\nimport webbrowser as _web\r\n\r\nclass ScratchUserSession:\r\n    def __init__(self, username, password, remember_password=False):\r\n        self.SERVER = 'scratch.mit.edu'\r\n        self.API_SERVER = 'api.scratch.mit.edu'\r\n        self.PROJECTS_SERVER = 'projects.scratch.mit.edu'\r\n        self.ASSETS_SERVER = 'assets.scratch.mit.edu'\r\n        self.CDN_SERVER = 'cdn.scratch.mit.edu'\r\n        self.CLOUD = 'cloud.scratch.mit.edu'\r\n        self.CLOUD_PORT = 531\r\n\r\n        self.lib.utils.request = self._request\r\n        self.lib.set.username = username\r\n        self.lib.set.password = None\r\n        self.lib.set.password_remembered = remember_password\r\n        if remember_password:\r\n            self.lib.set.password = password\r\n        self.lib.utils.session = _requests.session()\r\n\r\n        self.tools.verify_session = self._tools_verifySession\r\n        self.tools.update = self._tools_update\r\n        self.tools.reload_session = self._tools_reload_session\r\n\r\n        self.projects.get = self._projects_getProject\r\n        self.projects.set = self._projects_setProject\r\n        self.projects.comment = self._projects_comment\r\n        self.projects.get_meta = self._projects_get_meta\r\n        self.projects.get_remix_data = self._projects_get_remixtree\r\n\r\n        self.backpack.get = self._backpack_getBackpack\r\n        self.backpack.set = self._backpack_setBackpack\r\n\r\n        self.userpage.set_bio = self._userpage_setBio\r\n        self.userpage.set_status = self._userpage_setStatus\r\n        self.userpage.toggle_comments = self._userpage_toggleComments\r\n\r\n        self.users.follow = self._users_follow\r\n        self.users.unfollow = self._users_unfollow\r\n        self.users.get_message_count = self._users_get_message_count\r\n        self.users.comment = self._users_comment\r\n\r\n        self.messages.get_message_count = self._users_get_message_count\r\n        self.messages.get_message_html  = self._get_message_html\r\n\r\n        self.studios.comment = self._studios_comment\r\n        self.studios.get_meta = self._studios_get_meta\r\n\r\n        self.cloud.set_var = self._cloud_setvar\r\n        self.cloud.create_var = self._cloud_makevar\r\n        self.cloud.get_var = self._cloud_getvar\r\n        self.cloud.get_vars = self._cloud_getvars\r\n        self.cloud.rename_var = self._cloud_rename_var\r\n        self.cloud.delete_var = self._cloud_delete_var\r\n\r\n        self.HEADERS = {'X-Requested-With': 'XMLHttpRequest', 'Referer':'https:\/\/scratch.mit.edu\/'}\r\n        self.lib.utils.request(path='\/csrf_token\/', update=False)\r\n        self.HEADERS['Cookie'] = 'scratchcsrftoken=' + self.lib.utils.session.cookies.get('scratchcsrftoken') + '; scratchlanguage=en'\r\n        self.HEADERS['X-CSRFToken'] = self.lib.utils.session.cookies.get('scratchcsrftoken')\r\n        self.lib.utils.request(path='\/login\/', method='post', update=False, payload=_json.dumps({'username': username, 'password': password, 'csrftoken':self.lib.utils.session.cookies.get('scratchcsrftoken'), 'csrfmiddlewaretoken':self.lib.utils.session.cookies.get('scratchcsrftoken'),'captcha_challenge':'','captcha_response':'','embed_captcha':False,'timezone':'America\/New_York'}))\r\n        self.tools.update()\r\n    def _projects_getProject(self, projectId):\r\n        return self.lib.utils.request(path='\/internalapi\/project\/' + projectId + '\/get\/', server=self.PROJECTS_SERVER).json()\r\n    def _projects_setProject(self, projectId, payload):\r\n        return self.lib.utils.request(server=self.PROJECTS_SERVER, path='\/internalapi\/project\/' + projectId + '\/set\/', payload=_json.dumps(payload), method='post')\r\n    def _projects_get_meta(self, projid):\r\n        return self.lib.utils.request(path='\/api\/v1\/project\/' + str(projid) + '\/?format=json').json()\r\n    def _projects_get_remixtree(self, projid):\r\n        return self.lib.utils.request(path='\/projects\/' + str(projid) + '\/remixtree\/bare\/').json()\r\n    def _tools_verifySession(self):\r\n        return self.lib.utils.request(path='\/messages\/ajax\/get-message-count\/', port=None).status_code == 200\r\n    def _tools_reload_session(self, password=None, remember_password=None):\r\n        if remember_password == None:\r\n            remember_password = self.lib.set.password_remembered\r\n        if (password == None) and (not self.lib.set.password_remembered):\r\n            raise AttributeError('Password not stored in class (use ScratchUserSesssion(\\'User\\', \\'Password\\', remember_password=True) to remember password, or supply your password in ScratchUserSession.tools.reload_session())')\r\n        if password == None:\r\n            password = self.lib.set.password\r\n        self.__init__(self.lib.set.username, password, remember_password=remember_password)\r\n    def _backpack_getBackpack(self):\r\n        return self.lib.utils.request(path='\/internalapi\/backpack\/' + self.lib.set.username + '\/get\/').json()\r\n    def _backpack_setBackpack(self, payload):\r\n        return self.lib.utils.request(server=self.CDN_SERVER, path='\/internalapi\/backpack\/' + self.lib.set.username + '\/set\/', method=\"post\", payload=payload)\r\n    def _userpage_setStatus(self, payload):\r\n        p2 = self.lib.utils.request(path='\/site-api\/users\/all\/' + self.lib.set.username).json()\r\n        p = {}\r\n        for i in p2:\r\n            if i in ['comments_allowed', 'id', 'status', 'thumbnail_url', 'userId', 'username']:\r\n                p[i] = p2[i]\r\n        p['status'] = payload\r\n        return self.lib.utils.request(path='\/site-api\/users\/all\/' + self.lib.set.username, method=\"put\", payload=_json.dumps(p))\r\n    def _userpage_toggleComments(self):\r\n        return self.lib.utils.request(path='\/site-api\/comments\/user\/' + self.lib.set.username + '\/toggle-comments\/', method=\"put\", payload=_json.dumps(p))\r\n    def _userpage_setBio(self, payload):\r\n        p2 = self.lib.utils.request(path='\/site-api\/users\/all\/' + self.lib.set.username).json()\r\n        p = {}\r\n        for i in p2:\r\n            if i in ['comments_allowed', 'id', 'bio', 'thumbnail_url', 'userId', 'username']:\r\n                p[i] = p2[i]\r\n        p['bio'] = payload\r\n        return self.lib.utils.request(path='\/site-api\/users\/all\/' + self.lib.set.username, method=\"put\", payload=_json.dumps(p))\r\n    def _users_get_meta(self, usr):\r\n        return self.lib.utils.request(path='\/users\/' + usr, server=self.API_SERVER).json()\r\n    def _users_follow(self, usr):\r\n        return self.lib.utils.request(path='\/site-api\/users\/followers\/' + usr + '\/add\/?usernames=' + self.lib.set.username, method='PUT')\r\n    def _users_unfollow(self, usr):\r\n        return self.lib.utils.request(path='\/site-api\/users\/followers\/' + usr + '\/remove\/?usernames=' + self.lib.set.username, method='PUT')\r\n    def _users_comment(self, user, comment):\r\n        return self.lib.utils.request(path='\/site-api\/comments\/user\/' + user + '\/add\/', method='POST', payload=_json.dumps({\"content\":comment,\"parent_id\":'',\"commentee_id\":''}))\r\n    def _studios_comment(self, studioid, comment):\r\n        return self.lib.utils.request(path='\/site-api\/comments\/gallery\/' + str(studioid) + '\/add\/', method='POST', payload=_json.dumps({\"content\":comment,\"parent_id\":'',\"commentee_id\":''}))\r\n    def _studios_get_meta(self, studioid):\r\n        return self.lib.utils.request(path='\/site-api\/galleries\/all\/' + str(studioid)).json()\r\n    def _studios_invite(self, studioid, user):\r\n        return self.lib.utils.request(path='\/site-api\/users\/curators-in\/' + str(studioid) + '\/invite_curator\/?usernames=' + user, method='PUT')\r\n    def _projects_comment(self, projid, comment):\r\n        return self.lib.utils.request(path='\/site-api\/comments\/project\/' + str(projid) + '\/add\/', method='POST', payload=_json.dumps({\"content\":comment,\"parent_id\":'',\"commentee_id\":''}))\r\n    def _cloud_setvar(self, var, value, projId):\r\n        return self._cloud_send('set', projId, {'name': '\u2601 ' + var, 'value': value})\r\n    def _cloud_makevar(self, var, value, projId):\r\n        return self._cloud_send('create', projId, {'name': '\u2601 ' + var})\r\n    def _cloud_rename_var(self, oldname, newname, projId):\r\n        self._cloud_send('rename', projId, {'name': '\u2601 ' + oldname, 'new_name': '\u2601 ' + newname})\r\n    def _cloud_delete_var(self, name, projId):\r\n        self._cloud_send('delete', projId, {'name':'\u2601 ' + name})\r\n    def _cloud_getvar(self, var, projId):\r\n        return self._cloud_getvars(projId)[var]\r\n    def _cloud_getvars(self, projId):\r\n        dt = self.lib.utils.request(path='\/varserver\/' + str(projId)).json()['variables']\r\n        vardict = {}\r\n        for x in dt:\r\n            xn = x['name']\r\n            if xn.startswith('\u2601 '):\r\n                vardict[xn[2:]] = x['value']\r\n            else:\r\n                vardict[xn] = x['value']\r\n        return vardict\r\n    def _cloud_send(self, method, projId, options):\r\n        cloudToken = self.lib.utils.request(method='GET', path='\/projects\/' + str(projId) + '\/cloud-data.js').text.rsplit('\\n')[-28].replace(' ', '')[13:49]\r\n        bc = _hashlib.md5()\r\n        bc.update(cloudToken.encode())\r\n        data = {\r\n            \"token\": cloudToken,\r\n            \"token2\": bc.hexdigest(),\r\n            \"project_id\": str(projId),\r\n            \"method\": str(method),\r\n            \"user\": self.lib.set.username,\r\n        }\r\n        data.update(options)\r\n        return self.lib.utils.request(method='POST', path='\/varserver', payload=_json.dumps(data))\r\n    def _tools_update(self):\r\n        self.lib.set.csrf_token = self.lib.utils.session.cookies.get('scratchcsrftoken')\r\n        self.lib.set.sessions_id = self.lib.utils.session.cookies.get('scratchsessionsid')\r\n        self.HEADERS['Cookie'] = 'scratchcsrftoken=' + self.lib.utils.session.cookies.get_dict()['scratchcsrftoken'] + '; scratchsessionsid=' + self.lib.utils.session.cookies.get('scratchsessionsid') + '; scratchlanguage=en'\r\n        self.HEADERS['X-CSRFToken'] = self.lib.utils.session.cookies.get('scratchcsrftoken')\r\n    def _assets_get(self, md5):\r\n        return self.lib.utils.request(path='\/internalapi\/asset\/' + md5 + '\/get\/', server=self.ASSETS_SERVER).content\r\n    def _assets_set(self, md5, content, content_type=None):\r\n        if not content_type:\r\n            if _os.path.splitext(md5)[-1] == '.png':\r\n                content_type = 'image\/png'\r\n            elif _os.path.splitext(md5)[-1] == '.svg':\r\n                content_type = 'image\/svg+xml'\r\n            elif _os.path.splitext(md5)[-1] == '.wav':\r\n                content_type = 'audio\/wav'\r\n            else:\r\n                content_type = 'text\/plain'\r\n        headers = {'Content-Length':str(len(content)),\r\n'Origin':'https:\/\/cdn.scratch.mit.edu',\r\n'Content-Type':content_type,\r\n'Referer':'https:\/\/cdn.scratch.mit.edu\/scratchr2\/static\/__cc77646ad8a4b266f015616addd66756__\/Scratch.swf'}\r\n        return self.lib.utils.request(path='\/internalapi\/asset\/' + md5 + '\/set\/', method='POST', server=self.ASSETS_SERVER, payload=content)\r\n    def _users_get_message_count(self, user=None):\r\n        if user == None:\r\n            user = self.lib.set.username\r\n        return self.lib.utils.request(path='\/proxy\/users\/' + user + '\/activity\/count', server=self.API_SERVER).json()['msg_count']\r\n    def _get_message_html(self):\r\n        return self.lib.utils.request(path='\/messages\/')\r\n    def _request(self, **options):\r\n        headers = {}\r\n        for x in self.HEADERS:\r\n            headers[x] = self.HEADERS[x]\r\n        method = \"get\"\r\n        server = self.SERVER\r\n        port = ''\r\n        update = True\r\n        retry = 3\r\n        if 'method' in options:\r\n            method = options['method']\r\n        if 'server' in options:\r\n            server = options['server']\r\n        if 'payload' in options:\r\n            headers['Content-Length'] = len(str(options['payload']))\r\n        if 'port' in options:\r\n            if options['port'] == None:\r\n                port = ''\r\n            else:\r\n                port = ':' + str(options['port'])\r\n        if 'update' in options:\r\n            if options['update'] == True:\r\n                self.tools.update()\r\n            else:\r\n                update = False\r\n        else:\r\n            self.tools.update()\r\n        if 'headers' in options:\r\n            headers.update(options['headers'])\r\n        if 'retry' in options:\r\n            retry = options['retry']\r\n        server = 'https:\/\/' + server\r\n        headers = {x:str(headers[x]) for x in headers}\r\n        def request():\r\n            if 'payload' in options:\r\n                return getattr(self.lib.utils.session, method.lower())(server + port + options['path'], data=options['payload'], headers=headers)\r\n            else:\r\n                return getattr(self.lib.utils.session, method.lower())(server + port + options['path'], headers=headers)\r\n        success = False\r\n        for x in range(0, retry):\r\n            try:\r\n                r = request()\r\n            except _requests.exceptions.BaseHTTPError:\r\n                continue\r\n            except AttributeError:\r\n                raise ValueError('Unknown HTTP method')\r\n            else:\r\n                success = True\r\n                break\r\n        if not success:\r\n            raise ConnectionError('Connection failed on all ' + str(retry) + ' attempts')\r\n        if update:\r\n            self.tools.update()\r\n        return r\r\n    class lib:\r\n        class set: pass\r\n        class utils: pass\r\n    class tools: pass\r\n    class projects: pass\r\n    class backpack: pass\r\n    class userpage: pass\r\n    class users: pass\r\n    class messages: pass\r\n    class studios: pass\r\n    class cloud: pass\r\n\r\n\r\nclass CloudSession:\r\n    def __init__(self, projectId, session):\r\n        if type(session) == ScratchUserSession:\r\n            self._scratch = session\r\n        else:\r\n            self._scratch = ScratchUserSession(session[0], session[1])\r\n        self._user = self._scratch.lib.set.username\r\n        self._projectId = projectId\r\n        self._cloudId = self._scratch.lib.set.sessions_id\r\n        self._token = self._scratch.lib.utils.request(method='GET', path='\/projects\/' + str(self._projectId) + '\/cloud-data.js').text.rsplit('\\n')[-28].replace(' ', '')[13:49]\r\n        md5 = _hashlib.md5()\r\n        md5.update(self._cloudId.encode())\r\n        self._reset_last = _time.time()\r\n        self._reset = True\r\n        self._reset_interval = 300\r\n        self._rollover = []\r\n        self._md5token = md5.hexdigest()\r\n        self._connection = _socket.create_connection((self._scratch.CLOUD, self._scratch.CLOUD_PORT))\r\n        self._send('handshake', {})\r\n    def _send(self, method, options):\r\n        if self._reset:\r\n            if _time.time() > (self._reset_last + self._reset_interval):\r\n                reset_interval = self._reset_interval\r\n                self.__init__(self._projectId, self._scratch)\r\n                self._reset_interval = reset_interval\r\n        obj = {\r\n            'token': self._token,\r\n            'token2': self._md5token,\r\n            'user': self._user,\r\n            'project_id': str(self._projectId),\r\n            'method': method\r\n        }\r\n        obj.update(options)\r\n        ob = (_json.dumps(obj) + '\\r\\n').encode('utf-8')\r\n        try:\r\n            self._connection.send(ob)\r\n        except BrokenPipeError:\r\n            self.__init__(self._projectId, self._scratch)\r\n            self._connection.send(ob)\r\n        md5 = _hashlib.md5()\r\n        md5.update(self._md5token.encode())\r\n        self._md5token = md5.hexdigest()\r\n\r\n    def set_var(self, name, value):\r\n        self._send('set', {'name': '\u2601 ' + name, 'value': value})\r\n\r\n    def create_var(self, name, value=None):\r\n        if value == None:\r\n            value = 0\r\n        self._send('create', {'name': '\u2601 ' + name, 'value':value})\r\n\r\n    def rename_var(self, oldname, newname):\r\n        self._send('rename', {'name': '\u2601 ' + oldname, 'new_name': '\u2601 ' + newname})\r\n\r\n    def delete_var(self, name):\r\n        self._send('delete', {'name':'\u2601 ' + name})\r\n\r\n    def get_var(self, name):\r\n        return self._scratch.cloud.get_var(name, self._projectId)\r\n\r\n    def get_vars(self):\r\n        return self._scratch.cloud.get_vars(self._projectId)\r\n\r\n    def get_updates(self, timeout, max_count=10):\r\n        count = 0\r\n        updates = []\r\n        self._connection.settimeout(timeout)\r\n        while count < max_count:\r\n            data = ''.encode('utf-8')\r\n            while True:\r\n                try:\r\n                    data = data + self._connection.recv(4096)\r\n                    if data[-1] == 10:\r\n                        break\r\n                    self._connection.settimeout(0.1)\r\n                except:\r\n                    break\r\n            if not data:\r\n                break\r\n            self._connection.settimeout(0.01)\r\n            if data[0] == 123:\r\n                self._rollover = []\r\n            data = self._rollover + data.decode('utf-8').split('\\n')\r\n            if data[-1]:\r\n                self._rollover = [data[-1]]\r\n            else:\r\n                self._rollover = []\r\n            data = data[:-1]\r\n            for line in data:\r\n                if line:\r\n                    try:\r\n                        line = _json.loads(line)\r\n                        name = line['name']\r\n                        value = line['value']\r\n                        if name.startswith('\u2601 '):\r\n                            updates.append((name[2:], value))\r\n                        else:\r\n                            updates.append((name, value))\r\n                        count = count + 1\r\n                    except:\r\n                        continue\r\n        self._connection.settimeout(None)\r\n        return updates\r\n\r\n    def get_new_values(self, timeout, max_values=10):\r\n        nv = {}\r\n        for x in self.get_updates(timeout, max_values):\r\n            nv[x[0]] = x[1]\r\n        return nv\r\n\r\nclass _docs_view():\r\n    def __call__(self):\r\n        _web.open(\"https:\/\/github.com\/Dylan5797\/scratchapi\/wiki\/\")\r\n    def __repr__(self):\r\n        return \"See https:\/\/github.com\/Dylan5797\/scratchapi\/wiki\/ or call scratchapi.__doc__()\"\r\n__doc__ = _docs_view()\r\n"};

function builtinRead(x) {
    if (myCustomFiles[x] !== undefined) {
        return myCustomfiles[x];
    }

    if (Sk.builtinFiles === undefined || Sk.builtinFiles["files"][x] === undefined)
            throw "File not found: '" + x + "'";
    return Sk.builtinFiles["files"][x];
}
  // Here's everything you need to run a python program in skulpt

  // get the code from the window.AppInventor object
  var prog = window.AppInventor.getWebViewString();
  var mypre = document.getElementById("output");
  mypre.innerHTML = '';
  Sk.canvas = "mycanvas";
  Sk.pre = "output";
  Sk.configure({output:outf, read:builtinRead});
  try {
    eval(Sk.importMainWithBody("<stdin>",false,prog));
  }
  catch(e) {
    alert(e.toString())
  }
  </script>

</body>
</html>
